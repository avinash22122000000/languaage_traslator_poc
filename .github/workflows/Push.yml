name: Push
run-name: Push [${{ github.ref_name }}] ${{ github.event.after }}
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "public/locales/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl tar jq

      - name: Lokalise CLI
        run: |
          echo "Installing Lokalise CLI..."
          curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh -s -- v3.0.2
          if [ $? -ne 0 ]; then
            echo "Failed to install Lokalise CLI. Exiting."
            exit 1
          fi

      - name: Fetch Target Languages from Lokalise
        id: fetch_languages
        env:
          VAR_LOKALISE_API_TOKEN: a911e0108d0d4e39c2418b454cce59c71958acb6
          VAR_LOKALISE_PROJECT_ID: 697988836797282a57d412.26117221
        run: |
          # Fetch the list of target languages from Lokalise
          LANGUAGES=$(curl -s -X GET \
            -H "X-Api-Token: $VAR_LOKALISE_API_TOKEN" \
            "https://api.lokalise.com/api2/projects/$VAR_LOKALISE_PROJECT_ID/languages" | jq -r '.languages[] | select(.is_target == true) | .lang_iso')

          if [ -z "$LANGUAGES" ]; then
            echo "No target languages found in Lokalise. Exiting."
            exit 1
          fi

          # Convert the list of languages to a JSON array
          LANGUAGES_JSON=$(echo "$LANGUAGES" | jq -R -s -c 'split("\n")[:-1]')
          echo "Target languages: $LANGUAGES_JSON"

          # Set the output for use in subsequent steps
          echo "languages=$LANGUAGES_JSON" >> $GITHUB_OUTPUT

      - name: Push Translations to Lokalise
        env:
          VAR_LOKALISE_API_TOKEN: a911e0108d0d4e39c2418b454cce59c71958acb6
          VAR_LOKALISE_PROJECT_ID: 697988836797282a57d412.26117221
        run: |
          # Retrieve the list of target languages from the previous step
          LANGUAGES=${{ steps.fetch_languages.outputs.languages }}

          # Convert the JSON array to a Bash array
          LANGUAGES_ARRAY=$(echo "$LANGUAGES" | jq -r '.[]')

          for LANG in $LANGUAGES_ARRAY; do
            echo "Processing language: $LANG"
            MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD -- "public/locales/**$LANG.json")
            if [ -z "$MODIFIED_FILES" ]; then
              echo "No modified $LANG JSON files to push. Skipping."
              continue
            fi
            for file in $MODIFIED_FILES; do
              if [ -f "$file" ]; then
                ./bin/lokalise2 --token $VAR_LOKALISE_API_TOKEN \
                  --project-id $VAR_LOKALISE_PROJECT_ID \
                  file upload --file="$file" \
                  --lang-iso $LANG \
                  --replace-modified --include-path --use-automations=true \
                  --cleanup-mode --poll-timeout 120s
              fi
            done
          done

      - name: Debug Repository and Workflow
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Workflow Directory: .github/workflows/"
          ls -la .github/workflows/

      - name: Trigger Pull Workflow
        run: |
          gh workflow run .github/workflows/Pull.yml
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}